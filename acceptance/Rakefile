require 'beaker-puppet'

Beaker::DSL::Helpers::RakeHelpers.load_tasks

namespace :ci do
  namespace :test do
    desc <<-EOS
Run a limited but representative subset of acceptance tests against puppet-agent
(AIO) packages. This task is intended to reduce testing time on a per-commit
basis.

  $ SHA=<full sha> bundle exec rake ci:test:quick

SHA should be the full SHA for the puppet-agent package.
EOS
    task :quick => ['ci:check_env', 'ci:gen_hosts'] do
      ENV['TESTS'] = get_test_sample.join(",")
      Rake::Task["ci:test:aio"].invoke
    end
  end
end

def get_test_sample
  # This set represents a reasonable sample of puppet acceptance tests,
  # covering a wide range of features and code susceptible to regressions.
  tests = [ 'tests/direct_puppet/cached_catalog_remediate_local_drift.rb',
            'tests/resource/file/content_attribute.rb',
            'tests/puppet_apply_basics.rb',
            'tests/modules/install/basic_install.rb',
            'tests/face/loadable_from_modules.rb',
            'tests/language/functions_in_puppet_language.rb',
            'tests/node/check_woy_cache_works.rb',
            'tests/parser_functions/calling_all_functions.rb',
            'tests/ticket_4622_filebucket_diff_test.rb',
            'tests/pluginsync/4420_pluginfacts_should_be_resolvable_on_agent.rb',
            'tests/ssl/puppet_cert_generate_and_autosign.rb',
            'tests/resource/package/yum.rb',
            'tests/resource/service/ticket_5024_systemd_enabling_masked_service.rb',
            'tests/resource/service/puppet_service_management.rb'
          ]

  # Add any tests modified within the last two weeks to the list, excluding
  # deleted ones. We can't rely on --diff-filter, because an acceptance
  # test may be modified and then deleted in the same time range.
  modified = `git log --name-only --pretty="format:" --since 2.weeks ./tests`
  tests += modified.split("\n").reject do |s|
    s.empty?
  end.collect do |s|
    s.sub('acceptance/', '')
  end.select do |s|
    s =~ /\.rb$/
  end.find_all do |s|
    File.exist?(s)
  end

  tests.uniq.sort
end
